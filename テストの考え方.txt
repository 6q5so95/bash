実装前段階でのテストの考えを注入する
要件定義段階で、こういった内容をテストしよう、という議論を進める

開発期間中の変更要件、水面下に存在している要件が浮上する場合
急なお話とか、えっ？て話はあると構えておく
└すぐ対応してテストを行うようにする
└小さく、早く
└自動テスト、デクレ確認

探索的テスト
経験値、ノウハウに基づく人の気付きからの検証
└出てきた疑問を１つづつテストしていく、開発者に確認する
└小さな疑問でも少しづつ明らかにしていくことでテスト対象のソフトウェア理解が深まっていく
└更に別の確度でのテストを考えるきっかけにもなっていく

探索的テストの「学習」
仕様を見るだけでは洗い出しきれない「テストすべき点」を見つけることも含まれる

基本的なテスト技法は事前に使えるようになっている必要がある
いざテストになって調べて・・・などとやっている時間はない

探索的テストの進め方
・事前準備
└今回の追加機能でどのようなことを解消するのか
└他の機能と共有しているリソースはあるか？
└開発者として不安はあるか
└アプリを使ったときに発生してほしくない事はなにか
└記述的テストは済んでいるか
・探索的テスト実施
・まとめと共有
正常系→準正常系→異常系の段取りで進める

セッションベースドテスト
└事前にチームで共有しておく情報の明示、定義
└過去にあった同種のバグを共有する
└怪しい動作に繋がりそうな特定の手順を共有する
（例）
セッション１（１時間）
　対象：環境A面
　目的：XXXXが正しく計算されない条件を見つける

---

テストアーキテクチャ設計
- テストレベルの設計
  - 構成要素毎にテストするユニットテスト（コンポーネントテスト）
  - 結合したコンポーネントやサブシステムごとにテストしたり、結合がうまく行っているかを確認する結合テスト
  - システム全体をテストするシステムテスト
  - 複数のシステムを結合したサービス全体に対するシステムシステムズテスト

テストアーキテクチャ設計の進め方
- テストの責務をより小さな責務に具体化・分割する
- テスト活動をどう連携させるかを設計する
  - テストの重大な要求・リスクに対してどのようにテスト活動を連携させるかを設計する。課題に対してテストの方針建てを行いその過程で必要となるテストタイプやテスト設計を導出・方針建てする
- 全体の構造を整理する
  - テストレベルを開発プロセスに組み込んで、どのような順序・タイミング・完了基準で運用するか具体化したり、開発組織の余力に合わせて各テストの責務調整を行う

---

シフトレフト

- シフトレフトに親和性のあるテストの責務を増やす
- テストの全体整合を最適化する
  - バグ検出が目的なら、どのバグタイプをどのテスト活動で検出するかを整理する
  - さまざま要件の実現確認が目的ならば、それぞれのテストベースをどのテスト活動で確認するか整理し漏れがないようにする

