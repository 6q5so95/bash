Pythonの実装における具体的な記述ルールのテーマと項目の例を以下に示します。

- 命名規則
-- クラス名はUpperCamelCase
-- 関数名、変数名はlower_snake_case
-- 定数はUPPER_SNAKE_CASE

- コメント
-- すべての公開クラス、関数にドキュメント文字列を付ける
-- ロジックが複雑な部分はコメントを付ける
-- TODOやFIXMEなどのキーワードを使って未実装部分にコメントを付ける

- インデントと空白
-- インデントは4スペースを使用
-- 関数とクラスの間に2行空ける
-- クラス内のメソッド定義の間に1行空ける

- 引数
-- デフォルト引数はあまり使わない
-- 多くの引数はキーワード引数を推奨
-- ミュータブルな引数は避ける

- リストと辞書
-- リスト内包表記を使う
-- 辞書内包表記を使う
-- デフォルト辞書はOrderedDictを使う

- 条件分岐
-- 優先は合成可能で単純な条件式を使う
-- 複雑な場合はライブラリを使う
-- ネストは2以下にする

- 例外
-- 例外は具体的なbuiltinの例外を使う
-- 例外処理は1ヶ所にまとめる

- classの利用
-- 継承は1段階にする
-- メソッドはできるだけシンプルにする
-- クラス変数は大文字にする
-- プライベート属性はアンダースコア付きにする
-- 継承よりもcompositionを優先する
-- propertyを使って変数のget/setをカプセル化することを推奨する。
-- 変更したくない属性はプライベートにしてpropertyで参照のみ公開する。
-- 計算結果をキャッシュする場合はpropertyのsetterで制御する。
-- プライベート変数は名前の前にアンダースコア1つを付ける。
-- プライベートメソッドもアンダースコア1つを付ける。
-- プライベート関数は利用箇所が局所的な場合にのみ使う。
-- プライベート変数へのアクセスはプライベートメソッドを経由する。

- Pathの扱い、相対import
-- pathlibを利用する
-- 絶対パスは避ける
-- サブパッケージは相対インポートを使う

- logger
-- loggingモジュールを利用する
-- 共通のloggerをモジュールレベルで定義する
-- __name__を使ってログ出力を区別する
-- ログレベルを環境変数などで切り替えられるようにする

- コンテキストマネジャーの利用
-- with文でファイルやデータベースを開く
-- 組み込みのコンテキストマネージャーを優先する
-- 独自のコンテキストマネージャーは最小限にする

- 関数定義
-- 関数は小さく、1つのことに集中させる
-- 引数のデフォルト値は適切に設定する
-- 長い関数は複数の関数に分割する
-- 再帰呼び出しは避ける
