pytestの実装に関するガイドラインとして定義するべき主な項目を以下に示します。


.テストファイル名
.. test_xxx.py という命名規則を推奨

. テストメソッド名
.. test_xxx というprefixを付ける

. テストClass
.. 目的別／テストイベントの粒度でテストをClassにまとめる

. アサーション
.. assertを利用する


. フィクスチャ
.. conftest.pyで定義し共通化
.. fixtureは原則各テストパッケージ単位に作成、featureは原則conftest.pyに配置する
.. フィクスチャのスコープ
...function, class, module, sessionのスコープレベルを指定

. パラメタライズテスト
.. @pytest.mark.parametrizeデコレーターを使用
.. fixtureでのパラメータ生成を許容する

. 特定条件でスキップ
.. @pytest.mark.skipifデコレーターを使用

.. セットアップ実行ティアダウン構成を原則としfixtureを使用する
... yieldで制御する

.. 複数のfixture使用
... テスト効率化の観点から使用を許可する
... フィクスチャ間で依存関係をもたせて良い（データ初期化→データインタンス生成）


.実行ディレクトリ
.. プロジェクトルート下のtestsディレクトリから実行
... 相対インポート
... sys.pathは原則使用しない

. ヘルパー関数
.. 作成して良い
.. __tracebackhide__==Trueを設定する

. マーカー
.. 組み込みマーカーを使用する
.. True/Positive,True/Negative,False/Positive,False/Negativeの強化制御を行う　


. 環境変数設定/コンフィグデータの管理
.. tomlファイルに外だしし、読み込む

. ロギング
.. ログレベルやログファイルの出力設定を明確化
.. pytest -s -l INFO --log-file=test.log


. CI/CD パイプラインの定義
.. Jenkinsでの自動テストを設定
.. コードカバレッジ計測
... pytest-cov等のプラグインを使って未テスト行を把握


. モック
..テスト対象内部のモックと外部依存ライブラリのモックを区別する
..内部モック
... monkeypatchを使ったパッチ当てによるモック
... 部分的な動作変更を狙う
.. 外部モック
... requests_mockやpytest-mockを使ったモック
... 外部ライブラリの隔離や動作検証が目的
.. 名前付きモック関数
... mock_関数名 のように命名規約を決める
.. モックのスコープ
... 関数スコープ、クラススコープ、セッションスコープを明示
.. モック使用時の注意点
... 副作用への配慮や意図しない相互作用への注意喚起
... autospecの使用
.. 関数呼び出し検証にはモックを使用し正しく呼び出されることに特化して検証する
.. テスト対象外のコードのモック
... monkeypatchを使用してパッチ当てを行う
.. 外部連携 codeのモック
... requests_mockやpytest-mockを使用
